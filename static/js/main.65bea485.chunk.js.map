{"version":3,"sources":["DropZone/DropZone.module.scss","DropZone/DropZone.js","Icon/Icon.js","FileSaver.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","DropZone","useDropzone","acceptedFiles","getRootProps","getInputProps","files","map","file","path","size","className","styles","dropzone","Icon","status","renderIcon","FileSaver","useState","setFiles","length","type","accept","onChange","event","input","arr","name","split","extension","dsv","d3","reader","FileReader","onload","parse","target","result","d","readAsText","loadFile","f","i","onClick","console","log","forEach","saveAs","url","fileName","App","href","download","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,SAAW,6B,qLC8BdC,EA3BE,WAAO,IAAD,EACiCC,cAA/CC,EADc,EACdA,cAAeC,EADD,EACCA,aAAcC,EADf,EACeA,cAE/BC,EAAQH,EAAcI,KAAI,SAACC,GAAD,OAC/B,+BACEA,EAAKC,KADP,MACgBD,EAAKE,KADrB,WAASF,EAAKC,SAKf,OACC,0BAASE,UAAU,YAAnB,UACC,gDACKP,EAAa,CAChBO,UAAWC,IAAOC,YAFpB,cAKC,qCAAWR,MACX,4FAED,kCACC,uCACA,6BAAKC,W,QCFQQ,EAlBJ,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAWX,OACE,mCAXiB,SAACA,GAClB,OAAQA,GACN,IAAK,WACH,OAAO,cAAC,IAAD,IACT,IAAK,OACH,OAAO,cAAC,IAAD,IACT,QACE,OAAO,cAAC,IAAD,KAKPC,CAAWD,M,gBCiCNE,EA7CG,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAChBZ,EADgB,KACTa,EADS,KAyBvB,OACC,sCACGb,EAAMc,QAAU,uBAAOC,KAAK,OAAOC,OAAO,aAAaC,SAAU,SAACC,GAAD,OAxBpD,SAACC,GACjB,IAAMjB,EAAOiB,EAAMnB,MAAM,GACnBoB,EAAMlB,EAAKmB,KAAKC,MAAM,KACtBC,EAAYH,EAAIA,EAAIN,OAAS,GAC7BU,EAAMC,IAA2B,QAAdF,EAAsB,KAAO,KAEhDG,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAUV,GACzBL,EAASW,EAAIK,MAAMX,EAAMY,OAAOC,QAAQ,SAACC,GAAD,oBAAUvB,OAAQ,UAAauB,QAExEN,EAAOO,WAAW/B,GAc6DgC,CAAShB,EAAMY,YACxE,KAAhB9B,EAAMc,QAAe,cAAC,EAAD,IACzBd,EAAMc,QACN,qCACC,8BACEd,EAAMC,KAAI,SAACkC,EAAGC,GAAJ,OACV,cAAC,EAAD,CAAc3B,OAAQ0B,EAAE1B,QAAb2B,QAGb,wBAAQrB,KAAK,SAASV,UAAU,kBAAkBgC,QAAS,kBApB5DC,QAAQC,IAAIvC,QACZA,EAAMwC,SAAQ,SAACL,EAAGC,GAChBD,EAAE1B,OAAO,WACTI,EAAS,YAAIb,IAChByC,iBAAO,sCAAwCN,EAAEO,IAAKP,EAAEQ,cAgBtD,mC,MCpBUC,MAnBf,WACE,OACE,qBAAKvC,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,MAAf,UACE,gEACA,wCAAU,uCAAV,SAA+B,uCAA/B,sBACA,+BACE,oCAAM,sCAAN,kBACA,sCAAQ,2CAAR,2EAEF,mDAAqB,mBAAGwC,KAAK,gBAAgBC,UAAQ,EAAhC,kBAArB,QAAmE,mBAAGD,KAAK,gBAAgBC,UAAQ,EAAhC,kBAAnE,OACA,cAAC,EAAD,YCHKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.65bea485.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropzone\":\"DropZone_dropzone__3iYWw\"};","import React, { useState } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport styles from \"./DropZone.module.scss\"\n\nconst DropZone = () => {\n\tconst { acceptedFiles, getRootProps, getInputProps } = useDropzone()\n\n\tconst files = acceptedFiles.map((file) => (\n\t\t<li key={file.path}>\n\t\t\t{file.path} - {file.size} bytes\n\t\t</li>\n\t))\n\n\treturn (\n\t\t<section className=\"container\">\n\t\t\t<div\n\t\t\t\t{...getRootProps({\n\t\t\t\t\tclassName: styles.dropzone,\n\t\t\t\t})}\n\t\t\t>\n\t\t\t\t<input {...getInputProps()} />\n\t\t\t\t<p>Drag 'n' drop some files here, or click to select files</p>\n\t\t\t</div>\n\t\t\t<aside>\n\t\t\t\t<h4>Files</h4>\n\t\t\t\t<ul>{files}</ul>\n\t\t\t</aside>\n\t\t</section>\n\t)\n}\n\nexport default DropZone\n","import React from \"react\"\nimport { BsFileEarmark, BsFileEarmarkArrowDown, BsFileEarmarkCheck } from 'react-icons/bs'\n\n\n\nconst Icon = ({status}) => {\n    const renderIcon = (status)=>{\n      switch (status) {\n        case \"progress\":\n          return <BsFileEarmarkArrowDown />;\n        case \"done\":\n          return <BsFileEarmarkCheck />;\n        default:\n          return <BsFileEarmark />\n      }\n    }\n    return (\n      <>\n        { renderIcon(status) }\n      </>\n    )\n  }\n\n  export default Icon","import React, { useState } from 'react'\nimport DropZone from \"./DropZone\"\nimport Icon from \"./Icon\"\nimport { saveAs } from 'file-saver'\nimport * as d3 from 'd3'\n\nconst FileSaver = () => {\n\tconst [files, setFiles] = useState([])\n\n\tconst loadFile = (input) => {\n\t\tconst file = input.files[0]\n\t\tconst arr = file.name.split('.')\n\t\tconst extension = arr[arr.length - 1]\n\t\tconst dsv = d3.dsvFormat(extension === 'tsv' ? '\\t' : ',')\n\n\t\tconst reader = new FileReader()\n\t\treader.onload = function (event) {\n\t\t\tsetFiles(dsv.parse(event.target.result, (d) => ({ status: \"queued\", ...d })))\n\t\t}\n\t\treader.readAsText(file)\n\t}\n\tconst downloadFiles = () => {\n    console.log(files)\n    files.forEach((f, i) => {\n      f.status=\"progress\"\n      setFiles([...files])\n\t\t\tsaveAs('https://api.allorigins.win/raw?url=' + f.url, f.fileName)\n\t\t})\n  }\n  \n  \n\treturn (\n\t\t<>\n\t\t\t{!files.length && <input type=\"file\" accept=\".tsv, .csv\" onChange={(event) => loadFile(event.target)} />}\n      {!files.length===-2 && <DropZone />}\n\t\t\t{files.length && (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t{files.map((f, i) => (\n\t\t\t\t\t\t\t<Icon key={i} status={f.status} />\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t\t<button type=\"button\" className=\"btn btn-primary\" onClick={() => downloadFiles() }>\n\t\t\t\t\t\tDownload files\n\t\t\t\t\t</button>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t)\n}\n\nexport default FileSaver\n","import FileSaver from \"./FileSaver.js\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <h1>Download and rename many files</h1>\n          <p>Load a <kbd>.csv</kbd> or a <kbd>.tsv</kbd> with 2 columns:</p>\n          <ul>\n            <li>a <kbd>url</kbd> to the file</li>\n            <li>the <kbd>fileName</kbd> you want to give to the downloaded file (with original extension)</li>\n          </ul>\n          <p>Example datasets? <a href=\"./example.csv\" download>Here</a> and <a href=\"./example.tsv\" download>here</a>.</p>\n          <FileSaver />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}